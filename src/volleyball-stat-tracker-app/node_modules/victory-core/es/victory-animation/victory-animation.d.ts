import React from "react";
import PropTypes from "prop-types";
import TimerContext from "../victory-util/timer-context";
import type Timer from "../victory-util/timer";
/**
 * Single animation object to interpolate
 */
export declare type AnimationStyle = {
    [key: string]: string | number;
};
/**
 * Animation styles to interpolate
 */
export declare type AnimationData = AnimationStyle | AnimationStyle[];
export declare type AnimationEasing = "back" | "backIn" | "backOut" | "backInOut" | "bounce" | "bounceIn" | "bounceOut" | "bounceInOut" | "circle" | "circleIn" | "circleOut" | "circleInOut" | "linear" | "linearIn" | "linearOut" | "linearInOut" | "cubic" | "cubicIn" | "cubicOut" | "cubicInOut" | "elastic" | "elasticIn" | "elasticOut" | "elasticInOut" | "exp" | "expIn" | "expOut" | "expInOut" | "poly" | "polyIn" | "polyOut" | "polyInOut" | "quad" | "quadIn" | "quadOut" | "quadInOut" | "sin" | "sinIn" | "sinOut" | "sinInOut";
export interface VictoryAnimationProps {
    children: (style: AnimationStyle, info: AnimationInfo) => React.ReactNode;
    duration?: number;
    easing?: AnimationEasing;
    delay?: number;
    onEnd?: () => void;
    data: AnimationData;
}
export interface VictoryAnimationState {
    data: AnimationStyle;
    animationInfo: AnimationInfo;
}
export interface AnimationInfo {
    progress: number;
    animating: boolean;
    terminating?: boolean;
}
export interface VictoryAnimation {
    context: React.ContextType<typeof TimerContext>;
}
export declare class VictoryAnimation extends React.Component<VictoryAnimationProps, VictoryAnimationState> {
    static displayName: string;
    static propTypes: {
        children: PropTypes.Requireable<(...args: any[]) => any>;
        data: PropTypes.Requireable<object>;
        delay: PropTypes.Requireable<number>;
        duration: PropTypes.Requireable<number>;
        easing: PropTypes.Requireable<string>;
        onEnd: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        data: {};
        delay: number;
        duration: number;
        easing: string;
    };
    static contextType: React.Context<{
        transitionTimer: Timer;
        animationTimer: Timer;
    }>;
    private interpolator;
    private queue;
    private ease;
    private timer;
    private loopID?;
    constructor(props: any, context: any);
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    toNewName(ease: any): string;
    traverseQueue(): void;
    functionToBeRunEachFrame: (elapsed: any, duration: any) => void;
    render(): React.ReactNode;
}
//# sourceMappingURL=victory-animation.d.ts.map