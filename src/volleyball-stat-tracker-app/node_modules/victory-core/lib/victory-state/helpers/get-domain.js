"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDomain = getDomain;

var d3Array = _interopRequireWildcard(require("victory-vendor/d3-array"));

var _getAxisData = require("./get-axis-data");

var _typeHelpers = require("../../victory-util/type-helpers");

var _excluded = ["data", "includeZero"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// TODO: What should this default value be?
var DEFAULT_MIN = 0;
var DEFAULT_MAX = 1;

function getDomainFromMinMax() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MIN;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MAX;
  // TODO: Victoy currently has some really specific logic in getDomainFromMinMax
  // that adds or subtracts a very small number from each domain to avoid the min
  // and max being the same value. This has resulted in some weird behavior in the
  // past, so we should revisit this.
  return [min, max];
}

function getDomain(_ref, axis) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      includeZero = _ref.includeZero,
      props = _objectWithoutProperties(_ref, _excluded);

  var domainFromProps = (0, _typeHelpers.getValueForAxis)(props.domain, axis);
  var axisData = (0, _getAxisData.getAxisData)(data, axis);

  if (includeZero && axis === "y") {
    axisData.push(0);
  }

  if ((0, _typeHelpers.isTuple)(domainFromProps)) {
    return domainFromProps;
  }

  var _ref2 = d3Array.extent(axisData),
      _ref3 = _slicedToArray(_ref2, 2),
      min = _ref3[0],
      max = _ref3[1];

  var minDomain = (0, _typeHelpers.getValueForAxis)(props.minDomain, axis) || min;
  var maxDomain = (0, _typeHelpers.getValueForAxis)(props.maxDomain, axis) || max;

  if ((0, _typeHelpers.isDate)(minDomain) && (0, _typeHelpers.isDate)(maxDomain)) {
    return [min, max];
  } // TODO: There might be an edge case here where we have mixed types


  return getDomainFromMinMax(minDomain, maxDomain);
}
//# sourceMappingURL=get-domain.js.map