"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScale = getScale;

var _d3Scale = require("victory-vendor/d3-scale");

var Collection = _interopRequireWildcard(require("../../victory-util/collection"));

var _typeHelpers = require("../../victory-util/type-helpers");

var _getAxisData = require("./get-axis-data");

var _excluded = ["data"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DEFAULT_SCALE = _d3Scale.scaleLinear;

function isD3Scale(scale) {
  return (0, _typeHelpers.isFunction)(scale) && (0, _typeHelpers.isFunction)(scale().copy) && (0, _typeHelpers.isFunction)(scale().domain) && (0, _typeHelpers.isFunction)(scale().range);
}

function getD3ScaleFromString(scale) {
  switch (scale) {
    case "linear":
      return _d3Scale.scaleLinear;

    case "time":
      return _d3Scale.scaleTime;

    case "log":
      return _d3Scale.scaleLog;

    case "sqrt":
      return _d3Scale.scaleSqrt;

    default:
      return DEFAULT_SCALE;
  }
}

function getScale(_ref, axis) {
  var _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      props = _objectWithoutProperties(_ref, _excluded);

  var scale = (0, _typeHelpers.getValueForAxis)(props.scale, axis);

  if (isD3Scale(scale)) {
    return scale;
  }

  if (typeof scale === "string") {
    return getD3ScaleFromString(scale);
  }

  var axisData = (0, _getAxisData.getAxisData)(data, axis);

  if (Collection.containsDates(axisData)) {
    return _d3Scale.scaleTime;
  }

  return DEFAULT_SCALE;
}
//# sourceMappingURL=get-scale.js.map