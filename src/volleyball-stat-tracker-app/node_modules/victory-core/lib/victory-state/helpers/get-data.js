"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getData = getData;

var _orderBy2 = _interopRequireDefault(require("lodash/orderBy"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _typeHelpers = require("../../victory-util/type-helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getValue(datum, key) {
  if (typeof datum === "object") {
    return (0, _get2.default)(datum, key);
  }

  return datum;
}

function getNumericValue(value, fallback) {
  if (typeof value === "number" || value instanceof Date) {
    return value;
  }

  return fallback;
}

function getData() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$x = _ref.x,
      xAccessor = _ref$x === void 0 ? "x" : _ref$x,
      _ref$y = _ref.y,
      yAccessor = _ref$y === void 0 ? "y" : _ref$y,
      sortKey = _ref.sortKey,
      _ref$sortOrder = _ref.sortOrder,
      sortOrder = _ref$sortOrder === void 0 ? "ascending" : _ref$sortOrder,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data;

  var formattedData = data.reduce(function (nonNullData, datum, index) {
    var x = getValue(datum, xAccessor);
    var y = getValue(datum, yAccessor);

    if ((0, _isNil2.default)(x) || (0, _isNil2.default)(y)) {
      return nonNullData;
    }

    var _x = getNumericValue(x, index + 1);

    var _y = getNumericValue(y, index + 1); // TODO: Get this value if it is different


    var xName = typeof x === "string" ? x : undefined;
    var yName = typeof y === "string" ? y : undefined;
    var additionalProperties = (0, _typeHelpers.isKeyValueObject)(datum) ? datum : {};
    return [].concat(_toConsumableArray(nonNullData), [_objectSpread(_objectSpread(_objectSpread({
      x: x,
      y: y,
      _x: _x,
      _y: _y
    }, xName ? {
      xName: xName
    } : {}), yName ? {
      yName: yName
    } : {}), additionalProperties)]);
  }, []);

  if (sortKey) {
    var order = sortOrder === "descending" ? "desc" : "asc";
    return (0, _orderBy2.default)(formattedData, sortKey, order);
  }

  return formattedData;
}
//# sourceMappingURL=get-data.js.map