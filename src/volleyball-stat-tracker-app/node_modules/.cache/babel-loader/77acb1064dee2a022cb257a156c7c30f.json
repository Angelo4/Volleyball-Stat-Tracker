{"ast":null,"code":"import { createAction, createReducer } from '@reduxjs/toolkit';\nconst initialState = {\n  attack: {\n    point: 0,\n    success: 0,\n    error: 0\n  },\n  block: {\n    point: 0,\n    success: 0,\n    error: 0\n  },\n  serve: {\n    point: 0,\n    success: 0,\n    error: 0\n  },\n  reception: {\n    success: 0,\n    error: 0\n  },\n  dig: {\n    success: 0,\n    error: 0\n  },\n  set: {\n    point: 0,\n    success: 0,\n    error: 0\n  }\n}; // Attack actions\n\nconst incrementAttackPoint = createAction('attack/success/increment');\nconst incrementAttackSuccess = createAction('attack/point/increment');\nconst incrementAttackError = createAction('attack/error/increment'); // Block actions\n\nconst incrementBlockPoint = createAction('block/success/increment');\nconst incrementBlockSuccess = createAction('block/point/increment');\nconst incrementBlockError = createAction('block/error/increment'); // Serve actions\n\nconst incrementServePoint = createAction('serve/success/increment');\nconst incrementServeSuccess = createAction('serve/point/increment');\nconst incrementServeError = createAction('serve/error/increment'); // Reception actions\n\nconst incrementReceptionSuccess = createAction('reception/point/increment');\nconst incrementReceptionError = createAction('reception/error/increment'); // Dig actions\n\nconst incrementDigSuccess = createAction('dig/point/increment');\nconst incrementDigError = createAction('dig/error/increment'); // Set actions\n\nconst incrementSetPoint = createAction('set/success/increment');\nconst incrementSetSuccess = createAction('set/point/increment');\nconst incrementSetError = createAction('set/error/increment'); // Clear state\n\nconst clearState = createAction('clear');\nexport const sessionStatsReducer = createReducer(initialState, builder => {\n  builder // Attack cases\n  .addCase(incrementAttackPoint, state => {\n    state.attack.point = state.attack.point == null ? 0 : state.attack.point + 1;\n  }).addCase(incrementAttackSuccess, state => {\n    state.attack.success++;\n  }).addCase(incrementAttackError, state => {\n    state.attack.error++;\n  }) // Block cases\n  .addCase(incrementBlockPoint, state => {\n    state.block.point = state.block.point == null ? 0 : state.block.point + 1;\n  }).addCase(incrementBlockSuccess, state => {\n    state.block.success++;\n  }).addCase(incrementBlockError, state => {\n    state.block.error++;\n  }) // Serve cases\n  .addCase(incrementServePoint, state => {\n    state.serve.point = state.serve.point == null ? 0 : state.serve.point + 1;\n  }).addCase(incrementServeSuccess, state => {\n    state.serve.success++;\n  }).addCase(incrementServeError, state => {\n    state.serve.error++;\n  }) // Reception cases\n  .addCase(incrementReceptionSuccess, state => {\n    state.reception.success++;\n  }).addCase(incrementReceptionError, state => {\n    state.reception.error++;\n  }) // Dig cases\n  .addCase(incrementDigSuccess, state => {\n    state.dig.success++;\n  }).addCase(incrementDigError, state => {\n    state.dig.error++;\n  }) // Set cases\n  .addCase(incrementSetPoint, state => {\n    state.set.point = state.set.point == null ? 0 : state.set.point + 1;\n  }).addCase(incrementSetSuccess, state => {\n    state.set.success++;\n  }).addCase(incrementSetError, state => {\n    state.set.error++;\n  }) // Clear case\n  .addCase(clearState, state => {\n    state.attack = initialState.attack;\n    state.block = initialState.block;\n    state.serve = initialState.serve;\n    state.set = initialState.set;\n    state.reception = initialState.reception;\n    state.dig = initialState.dig;\n  });\n});\nexport const statKeeperActions = {\n  incrementAttackPoint,\n  incrementAttackSuccess,\n  incrementAttackError,\n  incrementBlockPoint,\n  incrementBlockSuccess,\n  incrementBlockError,\n  incrementServePoint,\n  incrementServeSuccess,\n  incrementServeError,\n  incrementReceptionSuccess,\n  incrementReceptionError,\n  incrementDigSuccess,\n  incrementDigError,\n  incrementSetPoint,\n  incrementSetSuccess,\n  incrementSetError,\n  clearState\n};","map":{"version":3,"names":["createAction","createReducer","initialState","attack","point","success","error","block","serve","reception","dig","set","incrementAttackPoint","incrementAttackSuccess","incrementAttackError","incrementBlockPoint","incrementBlockSuccess","incrementBlockError","incrementServePoint","incrementServeSuccess","incrementServeError","incrementReceptionSuccess","incrementReceptionError","incrementDigSuccess","incrementDigError","incrementSetPoint","incrementSetSuccess","incrementSetError","clearState","sessionStatsReducer","builder","addCase","state","statKeeperActions"],"sources":["/Users/angeloalcantara/Projects/Volleyball-Stat-Tracker/src/volleyball-stat-tracker-app/src/redux/StatsKeeper.tsx"],"sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit';\nimport { VbActionResult } from '../models/VBActionResult';\n\nexport interface VolleyBallStats {\n  attack: VbActionResult;\n  block: VbActionResult;\n  serve: VbActionResult;\n  reception: VbActionResult;\n  dig: VbActionResult;\n  set: VbActionResult;\n}\n\nconst initialState: VolleyBallStats = {\n  attack: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n  block: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n  serve: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n  reception: {\n    success: 0,\n    error: 0,\n  },\n  dig: {\n    success: 0,\n    error: 0,\n  },\n  set: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n};\n\n// Attack actions\nconst incrementAttackPoint = createAction<undefined>(\n  'attack/success/increment'\n);\nconst incrementAttackSuccess = createAction<undefined>(\n  'attack/point/increment'\n);\nconst incrementAttackError = createAction<undefined>('attack/error/increment');\n\n// Block actions\nconst incrementBlockPoint = createAction<undefined>('block/success/increment');\nconst incrementBlockSuccess = createAction<undefined>('block/point/increment');\nconst incrementBlockError = createAction<undefined>('block/error/increment');\n\n// Serve actions\nconst incrementServePoint = createAction<undefined>('serve/success/increment');\nconst incrementServeSuccess = createAction<undefined>('serve/point/increment');\nconst incrementServeError = createAction<undefined>('serve/error/increment');\n\n// Reception actions\nconst incrementReceptionSuccess = createAction<undefined>(\n  'reception/point/increment'\n);\nconst incrementReceptionError = createAction<undefined>(\n  'reception/error/increment'\n);\n\n// Dig actions\nconst incrementDigSuccess = createAction<undefined>('dig/point/increment');\nconst incrementDigError = createAction<undefined>('dig/error/increment');\n\n// Set actions\nconst incrementSetPoint = createAction<undefined>('set/success/increment');\nconst incrementSetSuccess = createAction<undefined>('set/point/increment');\nconst incrementSetError = createAction<undefined>('set/error/increment');\n\n// Clear state\nconst clearState = createAction<undefined>('clear');\n\nexport const sessionStatsReducer = createReducer(initialState, (builder) => {\n  builder\n    // Attack cases\n    .addCase(incrementAttackPoint, (state) => {\n      state.attack.point =\n        state.attack.point == null ? 0 : state.attack.point + 1;\n    })\n    .addCase(incrementAttackSuccess, (state) => {\n      state.attack.success++;\n    })\n    .addCase(incrementAttackError, (state) => {\n      state.attack.error++;\n    })\n    // Block cases\n    .addCase(incrementBlockPoint, (state) => {\n      state.block.point = state.block.point == null ? 0 : state.block.point + 1;\n    })\n    .addCase(incrementBlockSuccess, (state) => {\n      state.block.success++;\n    })\n    .addCase(incrementBlockError, (state) => {\n      state.block.error++;\n    })\n    // Serve cases\n    .addCase(incrementServePoint, (state) => {\n      state.serve.point = state.serve.point == null ? 0 : state.serve.point + 1;\n    })\n    .addCase(incrementServeSuccess, (state) => {\n      state.serve.success++;\n    })\n    .addCase(incrementServeError, (state) => {\n      state.serve.error++;\n    })\n    // Reception cases\n    .addCase(incrementReceptionSuccess, (state) => {\n      state.reception.success++;\n    })\n    .addCase(incrementReceptionError, (state) => {\n      state.reception.error++;\n    })\n    // Dig cases\n    .addCase(incrementDigSuccess, (state) => {\n      state.dig.success++;\n    })\n    .addCase(incrementDigError, (state) => {\n      state.dig.error++;\n    })\n    // Set cases\n    .addCase(incrementSetPoint, (state) => {\n      state.set.point = state.set.point == null ? 0 : state.set.point + 1;\n    })\n    .addCase(incrementSetSuccess, (state) => {\n      state.set.success++;\n    })\n    .addCase(incrementSetError, (state) => {\n      state.set.error++;\n    })\n    // Clear case\n    .addCase(clearState, (state) => {\n      state.attack = initialState.attack;\n      state.block = initialState.block;\n      state.serve = initialState.serve;\n      state.set = initialState.set;\n      state.reception = initialState.reception;\n      state.dig = initialState.dig;\n    });\n});\n\nexport const statKeeperActions = {\n  incrementAttackPoint,\n  incrementAttackSuccess,\n  incrementAttackError,\n  incrementBlockPoint,\n  incrementBlockSuccess,\n  incrementBlockError,\n  incrementServePoint,\n  incrementServeSuccess,\n  incrementServeError,\n  incrementReceptionSuccess,\n  incrementReceptionError,\n  incrementDigSuccess,\n  incrementDigError,\n  incrementSetPoint,\n  incrementSetSuccess,\n  incrementSetError,\n  clearState,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}