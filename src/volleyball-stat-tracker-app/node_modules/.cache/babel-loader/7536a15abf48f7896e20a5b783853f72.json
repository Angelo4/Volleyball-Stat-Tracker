{"ast":null,"code":"/**\n * A point in the 2d plane\n * @param {number} x - x coordinate\n * @param {number} y - y coordinate\n * @returns {object} - point object\n */\nvar point = function (x, y) {\n  return {\n    x: x,\n    y: y,\n    distance: function (p1) {\n      return Math.sqrt(Math.pow(this.x - p1.x, 2) + Math.pow(this.y - p1.y, 2));\n    },\n    // vector addition in 2d plane\n    add: function (p1) {\n      return point(this.x + p1.x, this.y + p1.y);\n    },\n    // vector subtraction in 2d\n    // returns p0 - p1\n    subtract: function (p1) {\n      return point(this.x - p1.x, this.y - p1.y);\n    },\n    // multiply a 2d point by a scalar\n    scalarMult: function (n) {\n      return point(this.x * n, this.y * n);\n    },\n    scalarDivide: function (n) {\n      if (n === 0) {\n        throw new Error(\"Division by 0 error\");\n      }\n\n      return point(this.x / n, this.y / n);\n    },\n    equals: function (p1) {\n      return this.x === p1.x && this.y === p1.y;\n    }\n  };\n};\n/**\n * A circle in the 2d plane\n * @param {point} center - center of circle\n * @param {number} radius - radius of circle\n * @returns {object} - point object\n */\n\n\nvar circle = function (center, radius) {\n  return {\n    center: center,\n    radius: radius,\n    hasIntersection: function (circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n\n      if (d > r0 + r1) {\n        return false; // separate circles\n      }\n\n      if (d < Math.abs(r0 - r1)) {\n        return false; // one circle contains another\n      }\n\n      return true;\n    },\n    equals: function (circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      return r0 === r1 && P0.equals(P1);\n    },\n    // Source: http://paulbourke.net/geometry/circlesphere/\n    // \"Intersection of two circles\" by Paul Bourke\n    // Left-most point is returned as 0th element of array\n    // Right-most point is returned as 1st elemennt of array\n    intersection: function (circle1) {\n      // eslint-disable-line max-statements\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n\n      if (!this.hasIntersection(circle1) || this.equals(circle1)) {\n        return [];\n      }\n\n      var a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (2 * d);\n      var h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n      var P2 = P0.add(P1.subtract(P0).scalarMult(a).scalarDivide(d));\n      var x0 = P0.x,\n          y0 = P0.y;\n      var x1 = P1.x,\n          y1 = P1.y;\n      var x2 = P2.x,\n          y2 = P2.y;\n      var P3s = [point(x2 - h * (y1 - y0) / d, y2 + h * (x1 - x0) / d), point(x2 + h * (y1 - y0) / d, y2 - h * (x1 - x0) / d)];\n      P3s.sort(function (Point1, Point2) {\n        return Point1.x - Point2.x;\n      });\n      return P3s;\n    },\n    solveX: function (y) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y - this.center.y, 2));\n      return [this.center.x - sqrt, this.center.x + sqrt];\n    },\n    solveY: function (x) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(x - this.center.x, 2));\n      return [this.center.y - sqrt, this.center.y + sqrt];\n    }\n  };\n};\n\nexport { circle, point };","map":{"version":3,"names":["point","x","y","distance","p1","Math","sqrt","pow","add","subtract","scalarMult","n","scalarDivide","Error","equals","circle","center","radius","hasIntersection","circle1","P0","P1","r0","r1","d","abs","intersection","a","h","P2","x0","y0","x1","y1","x2","y2","P3s","sort","Point1","Point2","solveX","solveY"],"sources":["/Users/angeloalcantara/Projects/Volleyball-Stat-Tracker/src/volleyball-stat-tracker-app/node_modules/victory-bar/es/geometry-helper-methods.js"],"sourcesContent":["/**\n * A point in the 2d plane\n * @param {number} x - x coordinate\n * @param {number} y - y coordinate\n * @returns {object} - point object\n */\nvar point = function (x, y) {\n  return {\n    x: x,\n    y: y,\n    distance: function (p1) {\n      return Math.sqrt(Math.pow(this.x - p1.x, 2) + Math.pow(this.y - p1.y, 2));\n    },\n    // vector addition in 2d plane\n    add: function (p1) {\n      return point(this.x + p1.x, this.y + p1.y);\n    },\n    // vector subtraction in 2d\n    // returns p0 - p1\n    subtract: function (p1) {\n      return point(this.x - p1.x, this.y - p1.y);\n    },\n    // multiply a 2d point by a scalar\n    scalarMult: function (n) {\n      return point(this.x * n, this.y * n);\n    },\n    scalarDivide: function (n) {\n      if (n === 0) {\n        throw new Error(\"Division by 0 error\");\n      }\n\n      return point(this.x / n, this.y / n);\n    },\n    equals: function (p1) {\n      return this.x === p1.x && this.y === p1.y;\n    }\n  };\n};\n/**\n * A circle in the 2d plane\n * @param {point} center - center of circle\n * @param {number} radius - radius of circle\n * @returns {object} - point object\n */\n\n\nvar circle = function (center, radius) {\n  return {\n    center: center,\n    radius: radius,\n    hasIntersection: function (circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n\n      if (d > r0 + r1) {\n        return false; // separate circles\n      }\n\n      if (d < Math.abs(r0 - r1)) {\n        return false; // one circle contains another\n      }\n\n      return true;\n    },\n    equals: function (circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      return r0 === r1 && P0.equals(P1);\n    },\n    // Source: http://paulbourke.net/geometry/circlesphere/\n    // \"Intersection of two circles\" by Paul Bourke\n    // Left-most point is returned as 0th element of array\n    // Right-most point is returned as 1st elemennt of array\n    intersection: function (circle1) {\n      // eslint-disable-line max-statements\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n\n      if (!this.hasIntersection(circle1) || this.equals(circle1)) {\n        return [];\n      }\n\n      var a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (2 * d);\n      var h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n      var P2 = P0.add(P1.subtract(P0).scalarMult(a).scalarDivide(d));\n      var x0 = P0.x,\n          y0 = P0.y;\n      var x1 = P1.x,\n          y1 = P1.y;\n      var x2 = P2.x,\n          y2 = P2.y;\n      var P3s = [point(x2 - h * (y1 - y0) / d, y2 + h * (x1 - x0) / d), point(x2 + h * (y1 - y0) / d, y2 - h * (x1 - x0) / d)];\n      P3s.sort(function (Point1, Point2) {\n        return Point1.x - Point2.x;\n      });\n      return P3s;\n    },\n    solveX: function (y) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y - this.center.y, 2));\n      return [this.center.x - sqrt, this.center.x + sqrt];\n    },\n    solveY: function (x) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(x - this.center.x, 2));\n      return [this.center.y - sqrt, this.center.y + sqrt];\n    }\n  };\n};\n\nexport { circle, point };\n//# sourceMappingURL=geometry-helper-methods.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}