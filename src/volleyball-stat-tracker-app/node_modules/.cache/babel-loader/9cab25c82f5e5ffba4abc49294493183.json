{"ast":null,"code":"import{createAction,createReducer}from'@reduxjs/toolkit';var initialState={attack:{point:0,success:0,error:0},block:{point:0,success:0,error:0},serve:{point:0,success:0,error:0},reception:{success:0,error:0},dig:{success:0,error:0},set:{point:0,success:0,error:0}};// Attack actions\nvar incrementAttackPoint=createAction('attack/success/increment');var incrementAttackSuccess=createAction('attack/point/increment');var incrementAttackError=createAction('attack/error/increment');// Block actions\nvar incrementBlockPoint=createAction('block/success/increment');var incrementBlockSuccess=createAction('block/point/increment');var incrementBlockError=createAction('block/error/increment');// Serve actions\nvar incrementServePoint=createAction('serve/success/increment');var incrementServeSuccess=createAction('serve/point/increment');var incrementServeError=createAction('serve/error/increment');// Reception actions\nvar incrementReceptionSuccess=createAction('reception/point/increment');var incrementReceptionError=createAction('reception/error/increment');// Dig actions\nvar incrementDigSuccess=createAction('dig/point/increment');var incrementDigError=createAction('dig/error/increment');// Set actions\nvar incrementSetPoint=createAction('set/success/increment');var incrementSetSuccess=createAction('set/point/increment');var incrementSetError=createAction('set/error/increment');// Clear state\nvar clearState=createAction('clear');export var sessionStatsReducer=createReducer(initialState,function(builder){builder// Attack cases\n.addCase(incrementAttackPoint,function(state){state.attack.point=state.attack.point==null?0:state.attack.point+1;}).addCase(incrementAttackSuccess,function(state){state.attack.success++;}).addCase(incrementAttackError,function(state){state.attack.error++;})// Block cases\n.addCase(incrementBlockPoint,function(state){state.block.point=state.block.point==null?0:state.block.point+1;}).addCase(incrementBlockSuccess,function(state){state.block.success++;}).addCase(incrementBlockError,function(state){state.block.error++;})// Serve cases\n.addCase(incrementServePoint,function(state){state.serve.point=state.serve.point==null?0:state.serve.point+1;}).addCase(incrementServeSuccess,function(state){state.serve.success++;}).addCase(incrementServeError,function(state){state.serve.error++;})// Reception cases\n.addCase(incrementReceptionSuccess,function(state){state.reception.success++;}).addCase(incrementReceptionError,function(state){state.reception.error++;})// Dig cases\n.addCase(incrementDigSuccess,function(state){state.dig.success++;}).addCase(incrementDigError,function(state){state.dig.error++;})// Set cases\n.addCase(incrementSetPoint,function(state){state.set.point=state.set.point==null?0:state.set.point+1;}).addCase(incrementSetSuccess,function(state){state.set.success++;}).addCase(incrementSetError,function(state){state.set.error++;})// Clear case\n.addCase(clearState,function(state){state.attack=initialState.attack;state.block=initialState.block;state.serve=initialState.serve;state.set=initialState.set;state.reception=initialState.reception;state.dig=initialState.dig;});});export var statKeeperActions={incrementAttackPoint:incrementAttackPoint,incrementAttackSuccess:incrementAttackSuccess,incrementAttackError:incrementAttackError,incrementBlockPoint:incrementBlockPoint,incrementBlockSuccess:incrementBlockSuccess,incrementBlockError:incrementBlockError,incrementServePoint:incrementServePoint,incrementServeSuccess:incrementServeSuccess,incrementServeError:incrementServeError,incrementReceptionSuccess:incrementReceptionSuccess,incrementReceptionError:incrementReceptionError,incrementDigSuccess:incrementDigSuccess,incrementDigError:incrementDigError,incrementSetPoint:incrementSetPoint,incrementSetSuccess:incrementSetSuccess,incrementSetError:incrementSetError,clearState:clearState};","map":{"version":3,"names":["createAction","createReducer","initialState","attack","point","success","error","block","serve","reception","dig","set","incrementAttackPoint","incrementAttackSuccess","incrementAttackError","incrementBlockPoint","incrementBlockSuccess","incrementBlockError","incrementServePoint","incrementServeSuccess","incrementServeError","incrementReceptionSuccess","incrementReceptionError","incrementDigSuccess","incrementDigError","incrementSetPoint","incrementSetSuccess","incrementSetError","clearState","sessionStatsReducer","builder","addCase","state","statKeeperActions"],"sources":["/Users/angeloalcantara/Projects/Volleyball-Stat-Tracker/volleyball-stat-tracker-app/src/redux/StatsKeeper.tsx"],"sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit';\nimport { VbActionResult } from '../models/VBActionResult';\n\nexport interface VolleyBallStats {\n  attack: VbActionResult;\n  block: VbActionResult;\n  serve: VbActionResult;\n  reception: VbActionResult;\n  dig: VbActionResult;\n  set: VbActionResult;\n}\n\nconst initialState: VolleyBallStats = {\n  attack: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n  block: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n  serve: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n  reception: {\n    success: 0,\n    error: 0,\n  },\n  dig: {\n    success: 0,\n    error: 0,\n  },\n  set: {\n    point: 0,\n    success: 0,\n    error: 0,\n  },\n};\n\n// Attack actions\nconst incrementAttackPoint = createAction<undefined>(\n  'attack/success/increment'\n);\nconst incrementAttackSuccess = createAction<undefined>(\n  'attack/point/increment'\n);\nconst incrementAttackError = createAction<undefined>('attack/error/increment');\n\n// Block actions\nconst incrementBlockPoint = createAction<undefined>('block/success/increment');\nconst incrementBlockSuccess = createAction<undefined>('block/point/increment');\nconst incrementBlockError = createAction<undefined>('block/error/increment');\n\n// Serve actions\nconst incrementServePoint = createAction<undefined>('serve/success/increment');\nconst incrementServeSuccess = createAction<undefined>('serve/point/increment');\nconst incrementServeError = createAction<undefined>('serve/error/increment');\n\n// Reception actions\nconst incrementReceptionSuccess = createAction<undefined>(\n  'reception/point/increment'\n);\nconst incrementReceptionError = createAction<undefined>(\n  'reception/error/increment'\n);\n\n// Dig actions\nconst incrementDigSuccess = createAction<undefined>('dig/point/increment');\nconst incrementDigError = createAction<undefined>('dig/error/increment');\n\n// Set actions\nconst incrementSetPoint = createAction<undefined>('set/success/increment');\nconst incrementSetSuccess = createAction<undefined>('set/point/increment');\nconst incrementSetError = createAction<undefined>('set/error/increment');\n\n// Clear state\nconst clearState = createAction<undefined>('clear');\n\nexport const sessionStatsReducer = createReducer(initialState, (builder) => {\n  builder\n    // Attack cases\n    .addCase(incrementAttackPoint, (state) => {\n      state.attack.point =\n        state.attack.point == null ? 0 : state.attack.point + 1;\n    })\n    .addCase(incrementAttackSuccess, (state) => {\n      state.attack.success++;\n    })\n    .addCase(incrementAttackError, (state) => {\n      state.attack.error++;\n    })\n    // Block cases\n    .addCase(incrementBlockPoint, (state) => {\n      state.block.point = state.block.point == null ? 0 : state.block.point + 1;\n    })\n    .addCase(incrementBlockSuccess, (state) => {\n      state.block.success++;\n    })\n    .addCase(incrementBlockError, (state) => {\n      state.block.error++;\n    })\n    // Serve cases\n    .addCase(incrementServePoint, (state) => {\n      state.serve.point = state.serve.point == null ? 0 : state.serve.point + 1;\n    })\n    .addCase(incrementServeSuccess, (state) => {\n      state.serve.success++;\n    })\n    .addCase(incrementServeError, (state) => {\n      state.serve.error++;\n    })\n    // Reception cases\n    .addCase(incrementReceptionSuccess, (state) => {\n      state.reception.success++;\n    })\n    .addCase(incrementReceptionError, (state) => {\n      state.reception.error++;\n    })\n    // Dig cases\n    .addCase(incrementDigSuccess, (state) => {\n      state.dig.success++;\n    })\n    .addCase(incrementDigError, (state) => {\n      state.dig.error++;\n    })\n    // Set cases\n    .addCase(incrementSetPoint, (state) => {\n      state.set.point = state.set.point == null ? 0 : state.set.point + 1;\n    })\n    .addCase(incrementSetSuccess, (state) => {\n      state.set.success++;\n    })\n    .addCase(incrementSetError, (state) => {\n      state.set.error++;\n    })\n    // Clear case\n    .addCase(clearState, (state) => {\n      state.attack = initialState.attack;\n      state.block = initialState.block;\n      state.serve = initialState.serve;\n      state.set = initialState.set;\n      state.reception = initialState.reception;\n      state.dig = initialState.dig;\n    });\n});\n\nexport const statKeeperActions = {\n  incrementAttackPoint,\n  incrementAttackSuccess,\n  incrementAttackError,\n  incrementBlockPoint,\n  incrementBlockSuccess,\n  incrementBlockError,\n  incrementServePoint,\n  incrementServeSuccess,\n  incrementServeError,\n  incrementReceptionSuccess,\n  incrementReceptionError,\n  incrementDigSuccess,\n  incrementDigError,\n  incrementSetPoint,\n  incrementSetSuccess,\n  incrementSetError,\n  clearState,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}