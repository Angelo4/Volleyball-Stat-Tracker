import PropTypes from "prop-types";
import React from "react";
import { Data, Domain, EventPropTypeInterface, InterpolationPropType, StringOrNumberOrCallback, VictoryCommonProps, VictoryDatableProps, VictoryMultiLabelableProps, VictoryStyleInterface, EventsMixinClass } from "victory-core";
export declare type VictoryAreaTTargetType = "data" | "labels" | "parent";
export interface VictoryAreaProps extends VictoryCommonProps, VictoryDatableProps, VictoryMultiLabelableProps {
    eventKey?: string[] | number[] | StringOrNumberOrCallback;
    events?: EventPropTypeInterface<VictoryAreaTTargetType, string | number>[];
    interpolation?: InterpolationPropType | Function;
    samples?: number;
    style?: VictoryStyleInterface;
}
interface VictoryAreaBase extends EventsMixinClass<VictoryAreaProps> {
}
/**
 * Draw area charts with React. VictoryArea is a composable component, so it doesn't include axes.
 * Add VictoryArea as a child of VictoryChart for a complete chart.
 */
declare class VictoryAreaBase extends React.Component<VictoryAreaProps> {
    static animationWhitelist: string[];
    static propTypes: {
        interpolation: PropTypes.Requireable<string | ((...args: any[]) => any)>;
        label: PropTypes.Validator<string | null | undefined>;
        categories?: React.Validator<import("victory-core").CategoryPropType | null | undefined> | undefined;
        data?: React.Validator<readonly any[] | null | undefined> | undefined;
        dataComponent?: React.Validator<React.ReactElement<any, string | React.JSXElementConstructor<any>> | null | undefined> | undefined;
        domain?: React.Validator<import("victory-core").ForAxes<import("victory-core").DomainTuple> | null | undefined> | undefined;
        domainPadding?: React.Validator<import("victory-core").ForAxes<import("victory-core").PaddingType> | null | undefined> | undefined;
        samples?: React.Validator<number | null | undefined> | undefined;
        sortKey?: React.Validator<import("victory-core").DataGetterPropType | null | undefined> | undefined;
        sortOrder?: React.Validator<import("victory-core").SortOrderPropType | null | undefined> | undefined;
        x?: React.Validator<import("victory-core").DataGetterPropType | null | undefined> | undefined;
        y?: React.Validator<import("victory-core").DataGetterPropType | null | undefined> | undefined;
        y0?: React.Validator<import("victory-core").DataGetterPropType | null | undefined> | undefined;
        theme?: React.Validator<import("victory-core").VictoryThemeDefinition | null | undefined> | undefined;
        animate?: React.Validator<boolean | import("victory-core").AnimatePropTypeInterface | null | undefined> | undefined;
        colorScale?: React.Validator<import("victory-core").ColorScalePropType | null | undefined> | undefined;
        containerComponent?: React.Validator<React.ReactElement<any, string | React.JSXElementConstructor<any>> | null | undefined> | undefined;
        externalEventMutations?: React.Validator<import("victory-core").EventCallbackInterface<string | string[], import("victory-core").StringOrNumberOrList>[] | null | undefined> | undefined;
        groupComponent?: React.Validator<React.ReactElement<any, string | React.JSXElementConstructor<any>> | null | undefined> | undefined;
        height?: React.Validator<number | null | undefined> | undefined;
        horizontal?: React.Validator<boolean | null | undefined> | undefined;
        maxDomain?: React.Validator<number | {
            x?: number | undefined;
            y?: number | undefined;
        } | null | undefined> | undefined;
        minDomain?: React.Validator<number | {
            x?: number | undefined;
            y?: number | undefined;
        } | null | undefined> | undefined;
        name?: React.Validator<string | null | undefined> | undefined;
        origin?: React.Validator<import("victory-core").OriginType | null | undefined> | undefined;
        padding?: React.Validator<import("victory-core").PaddingProps | null | undefined> | undefined;
        polar?: React.Validator<boolean | null | undefined> | undefined;
        range?: React.Validator<import("victory-core").ForAxes<import("victory-core").RangeTuple> | null | undefined> | undefined;
        scale?: React.Validator<import("victory-core").D3Scale<any> | import("victory-core").ScaleName | {
            x?: import("victory-core").D3Scale<any> | import("victory-core").ScaleName | undefined;
            y?: import("victory-core").D3Scale<any> | import("victory-core").ScaleName | undefined;
        } | null | undefined> | undefined;
        sharedEvents?: React.Validator<{
            events: any[];
            getEventState: Function;
        } | null | undefined> | undefined;
        singleQuadrantDomainPadding?: React.Validator<boolean | {
            x?: boolean | undefined;
            y?: boolean | undefined;
        } | null | undefined> | undefined;
        standalone?: React.Validator<boolean | null | undefined> | undefined;
        width?: React.Validator<number | null | undefined> | undefined;
    };
    static defaultProps: {
        containerComponent: JSX.Element;
        dataComponent: JSX.Element;
        groupComponent: JSX.Element;
        labelComponent: JSX.Element;
        samples: number;
        sortKey: string;
        sortOrder: string;
        standalone: boolean;
        theme: import("victory-core").VictoryThemeDefinition;
    };
    static displayName: string;
    static role: string;
    static continuous: boolean;
    static defaultTransitions: import("victory-core").AnimatePropTypeInterface;
    static defaultPolarTransitions: import("victory-core").AnimatePropTypeInterface;
    static getDomain: typeof Domain.getDomainWithZero;
    static getData: typeof Data.getData;
    static getBaseProps: (props: any) => any;
    static expectedComponents: string[];
    shouldAnimate(): boolean;
    render(): any;
}
export declare const VictoryArea: {
    new (props: import("victory-core").EventMixinCommonProps): {
        state: {};
        getEventState: (eventKey: string | number, namespace: string, childType?: string | undefined) => any;
        getScopedEvents: (events: any, namespace: any, childType: any, baseProps: any) => {};
        getEvents: (p: any, target: any, eventKey: any) => any;
        externalMutations: {} | undefined;
        calculatedState: {};
        globalEvents: {};
        prevGlobalEventKeys: string[];
        boundGlobalEvents: {};
        shouldComponentUpdate(nextProps: import("victory-core").EventMixinCommonProps): boolean;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any): void;
        componentWillUnmount(): void;
        addGlobalListener(key: any): void;
        removeGlobalListener(key: any): void;
        getStateChanges(props: any): {};
        applyExternalMutations(props: any, externalMutations: any): void;
        getCalculatedValues(props: any): import("victory-core").EventMixinCalculatedValues;
        getExternalMutations(props: import("victory-core").EventMixinCommonProps): {} | undefined;
        cacheValues(obj: any): void;
        getBaseProps(props: any, getSharedEventState: any): Record<string, object>;
        getAllEvents(props: any): any;
        getComponentProps(component: any, type: any, index: any): any;
        renderContainer(component: any, children: any): React.DetailedReactHTMLElement<any, HTMLElement>;
        animateComponent(props: import("victory-core").EventMixinCommonProps, defaultAnimationWhitelist: string[]): JSX.Element;
        renderContinuousData(props: import("victory-core").EventMixinCommonProps): React.DetailedReactHTMLElement<any, HTMLElement>;
        renderData(props: any, shouldRenderDatum?: ((datum: any) => boolean) | undefined): React.DetailedReactHTMLElement<any, HTMLElement>;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("victory-core").EventMixinCommonProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<import("victory-core").EventMixinCommonProps>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("victory-core").EventMixinCommonProps>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextState: Readonly<{}>, nextContext: any): void;
        componentEvents: import("victory-core/lib/victory-util/events").ComponentEvent[];
        getSharedEventState: (key: string, value: string) => unknown;
        baseProps: Record<string, object>;
        dataKeys: string[];
        hasEvents: unknown;
        events: unknown;
    };
    getBaseProps?(props: import("victory-core").EventMixinCommonProps): Record<string, object>;
    role?: string | undefined;
    expectedComponents?: string[] | undefined;
} & typeof VictoryAreaBase;
export {};
//# sourceMappingURL=victory-area.d.ts.map